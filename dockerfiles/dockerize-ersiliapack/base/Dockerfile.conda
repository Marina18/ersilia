FROM debian:12.7-slim
ARG VERSION=py38_23.11.0-2
ENV VERSION=$VERSION
ENV PATH=$PATH:/usr/bin/conda/bin
WORKDIR /root
COPY . /ersilia-pack
    
RUN set -x && \
    apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates wget && \
    ARCH=$(uname -m) && \
    if [ "$ARCH" = "arm64" ] || [ "$ARCH" = "aarch64" ]; then \
        echo "ARM64 architecture detected: installing compilers..." && \
        apt-get install -y --no-install-recommends \
            gcc \
            g++ \
            make \
            binutils \
            pkg-config && \
        echo "Compilers installed on $ARCH"; \
    else \
        echo "Non-ARM architecture ($ARCH): skipping compiler install"; \
    fi && \
    if [ "$ARCH" = "x86_64" ]; then \
        echo "AMD64 architecture detected" && \
        wget https://repo.anaconda.com/miniconda/Miniconda3-$VERSION-Linux-x86_64.sh -O miniconda.sh; \
        echo "$ARCH" > arch.sh; \
    elif [ "$ARCH" = "amd64" ]; then \
        echo "AMD64 architecture detected" && \
        wget https://repo.anaconda.com/miniconda/Miniconda3-$VERSION-Linux-x86_64.sh -O miniconda.sh; \
        echo "$ARCH" > arch.sh; \
    elif [ "$ARCH" = "arm64" ]; then \
        echo "ARM64 architecture detected" && \
        wget https://repo.anaconda.com/miniconda/Miniconda3-$VERSION-Linux-aarch64.sh -O miniconda.sh; \
        echo "$ARCH" > arch.sh; \
    elif [ "$ARCH" = "aarch64" ]; then \
        echo "AARCH64 architecture detected" && \
        wget https://repo.anaconda.com/miniconda/Miniconda3-$VERSION-Linux-aarch64.sh -O miniconda.sh; \
        echo "$ARCH" > arch.sh; \
    else \
        echo "Unsupported architecture: $ARCH"; \
        echo "$ARCH" > arch.sh; \
    fi && \
    mkdir -p /usr/bin/conda && \
    bash /root/miniconda.sh -b -u -p /usr/bin/conda && \
    rm /root/miniconda.sh && \
    . /usr/bin/conda/etc/profile.d/conda.sh && \
    conda init && \
    /usr/bin/conda/bin/conda update -n base conda && \
    /usr/bin/conda/bin/conda config --set channel_priority strict && \
    /usr/bin/conda/bin/conda install -n base -y -c conda-forge conda-libmamba-solver && \
    /usr/bin/conda/bin/conda config --set solver libmamba && \
    /usr/bin/conda/bin/conda config --add channels defaults && \
    /usr/bin/conda/bin/conda config --add channels conda-forge && \
    /usr/bin/conda/bin/conda clean -afy && \
    cd /ersilia-pack && \
    /usr/bin/conda/bin/python -m pip install . && \
    mv /ersilia-pack/docker-entrypoint.sh /root/docker-entrypoint.sh && \
    chmod +x /root/docker-entrypoint.sh
    
EXPOSE 80
ENTRYPOINT [ "sh", "/root/docker-entrypoint.sh"]
